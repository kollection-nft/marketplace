syntax = "proto3";
package marketplace;
import "koinos/options.proto";

message order_id {
  bytes collection_id = 1;
  bytes token_id = 2;
}

message hash_id {
  bytes token = 1;
  bytes owner = 2;
  bytes collection = 3;
  uint64 expire = 4;
  uint64 price = 5;
}

message order_object {
  bytes id = 1;
  bytes seller = 2 [(koinos.btype) = ADDRESS];
  bytes collection = 3 [(koinos.btype) = ADDRESS];
  bytes token_sell = 4 [(koinos.btype) = ADDRESS];
  bytes token_id = 5 [(koinos.btype) = HEX];
  uint64 token_price = 6 [jstype = JS_STRING];
  uint64 time_expire = 7 [jstype = JS_STRING];
}


/*
* RPC calls
*/

// @description Create order sell
// @read-only true
message get_order_arguments {
  bytes collection = 1 [(koinos.btype) = ADDRESS];
  bytes token_id = 2 [(koinos.btype) = HEX];
}
message get_order_result {
  order_object result = 1;
}

// @description Create order sell
// @read-only false
message create_order_arguments {
  bytes collection = 1 [(koinos.btype) = ADDRESS];
  bytes token_sell = 2 [(koinos.btype) = ADDRESS];
  
  bytes token_id = 3 [(koinos.btype) = HEX];
  uint64 token_price = 4 [jstype = JS_STRING];
  uint64 time_expire = 5 [jstype = JS_STRING];
}
message create_order_result {
  bool result = 1;
}


// @description Execute order sell
// @read-only false
message execute_order_arguments {
  bytes collection = 1 [(koinos.btype) = ADDRESS];
  bytes token_id = 2 [(koinos.btype) = HEX];
}
message execute_order_result {
  bool result = 1;
}


// @description Cancel order sell
// @read-only false
message cancel_order_arguments {
  bytes collection = 1 [(koinos.btype) = ADDRESS];
  bytes token_id = 2 [(koinos.btype) = HEX];
}
message cancel_order_result {
  bool result = 1;
}


/*
* Events
*/

message create_order_event {
  bytes id = 1;
  bytes seller = 2 [(koinos.btype) = ADDRESS];
  bytes collection = 3 [(koinos.btype) = ADDRESS];
  bytes token_id = 4 [(koinos.btype) = HEX];
  uint64 token_price = 5 [jstype = JS_STRING];
  uint64 time_expire = 6 [jstype = JS_STRING];
  bytes token_sell = 7 [(koinos.btype) = ADDRESS];
}

message execute_order_event {
  bytes id = 1;
  bytes buyer = 2 [(koinos.btype) = ADDRESS];
  bytes seller = 3 [(koinos.btype) = ADDRESS];
  bytes collection = 4 [(koinos.btype) = ADDRESS];
  bytes token_id = 5 [(koinos.btype) = HEX];
  uint64 price_final = 6 [jstype = JS_STRING];
  uint64 protocol_fee = 7 [jstype = JS_STRING];
  uint64 royalties_fee = 8 [jstype = JS_STRING];
  bytes token_sell = 9 [(koinos.btype) = ADDRESS];
}

message cancel_order_event {
  bytes id = 1;
  bytes seller = 3 [(koinos.btype) = ADDRESS];
  bytes collection = 4 [(koinos.btype) = ADDRESS];
  bytes token_id = 5 [(koinos.btype) = HEX];
}
